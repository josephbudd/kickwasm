

/*
	Below is a GetCustomer example file.
	It demonstrates how you need to define your own local procedure calls.

	I would probably name it mainprocess/calls/getCustomer.go

	In my application I would also have similar files for
	  * GetCustomers
	  * UpdateCustomer
	  * RemoveCustomer

	A total of 5 things must be done.
	1. Define the params that the renderer sends to the mainprocess.
	   * In this case: RendererToMainProcessGetCustomerParams
	2. Define the params that the mainprocess sends to the renderer.
	   * In this case: MainProcessToRendererGetCustomerParams
	3. Define the constructor.
	   * In this case: newGetCustomerLPC
	   * The constructor only needs 2 funcs defined for it.
	     * In this case...
	     1. "mainProcessReceiveGetCustomer" which is the complete main process job.
	     2. "rendererReceiveAndDispatchGetCustomer" which is a simple renderer setup for the dispath process.
*/


package calls

import (
	"encoding/json"
	"fmt"
	"log"

	"github.com/josephbudd/kickwasm/examples/contacts/mainprocess/behavior/repoi"
)

// RendererToMainProcessGetCustomerParams is the GetCustomer function parameters that the renderer sends to the main process.
type RendererToMainProcessGetCustomerParams struct {
	ID    uint64
}

// MainProcessToRendererGetCustomerParams is the GetCustomer function parameters that the main process sends to the renderer.
type MainProcessToRendererGetCustomerParams struct {
	Error        bool
	ErrorMessage string
	Record       *records.CustomerRecord
}

// newGetCustomerLPC is the constructor for the GetCustomer local procedure call.
// It should only receive the repos that are needed. In this case the customer repo.
// Param customerRepo repoi.CustomerRepoI is the customer repo needed to get a customer record.
// Param rendererSendPayload: is a kickasm generated renderer func that sends data to the main process.
func newGetCustomerLPC(customerRepo repoi.CustomerRepoI, rendererSendPayload func(payload []byte) error) *LPC {
	return newLPC(
		func(params []byte, call func([]byte)) {
			mainProcessReceiveGetCustomer(params, call, customerRepo)
		},
		rendererReceiveAndDispatchGetCustomer,
		rendererSendPayload,
	)
}

// mainProcessReceiveGetCustomer is a main process func.
// This is how the main process receives a call from the renderer.
// Param params is a []byte of a MainProcessToRendererGetCustomerParams
// Param callBackToRenderer is a func that calls back to the renderer.
// Param customerRepo is the customer repo.
// The func is simple:
// 1. Unmarshall the params. Call back any errors.
// 2. Get the customer from the repo. Call back any errors or not found.
// 3. Call the renderer back with the customer record.
func mainProcessReceiveGetCustomer(params []byte, callBackToRenderer func(params []byte), customerRepo repoi.CustomerRepoI) {
	// 1. Unmarshall the params.
	rxparams := &RendererToMainProcessGetCustomerParams{}
	if err := json.Unmarshal(params, rxparams); err != nil {
		// Call back the error.
		log.Println("mainProcessReceiveGetCustomer error is ", err.Error())
		message := fmt.Sprintf("mainProcessGetCustomer: json.Unmarshal(params, rxparams): error is %s\n", err.Error())
		txparams := &MainProcessToRendererGetCustomerParams{
			Error:        true,
			ErrorMessage: message,
		}
		txparamsbb, _ := json.Marshal(txparams)
		callBackToRenderer(txparamsbb)
		return
	}
	// 2. Get the customer from the repo.
	customer, err := customerRepo.GetCustomer(rxparams.ID)
	if err != nil {
		// Call back the error.
		message := fmt.Sprintf("mainProcessGetCustomer: customerRepo.GetCustomer(rxparams.ID): error is %s\n", err.Error())
		txparams := &MainProcessToRendererGetCustomerParams{
			Error:        true,
			ErrorMessage: message,
		}
		txparamsbb, _ := json.Marshal(txparams)
		callBackToRenderer(txparamsbb)
		return
	}
	if customer == nil {
		// Call back "record not found".
		message := "mainProcessGetCustomer: customerRepo.GetCustomer(rxparams.ID): error is Record Not Found"
		txparams := &MainProcessToRendererGetCustomerParams{
			Error:        true,
			ErrorMessage: message,
		}
		txparamsbb, _ := json.Marshal(txparams)
		callBackToRenderer(txparamsbb)
		return
	}
	// 3. Call the renderer back with the customer record.
	txparams := &MainProcessToRendererGetCustomerParams{
		Record:        customer,
	}
	txparamsbb, _ := json.Marshal(txparams)
	callBackToRenderer(txparamsbb)
}

// rendererReceiveAndDispatchGetCustomer is a renderer func.
// It receives and dispatches the params sent by the main process.
// Param params is a []byte of a MainProcessToRendererGetCustomerParams
// Param dispatch is a func that dispatches params to the renderer call backs.
// This func is simple.
// 1. Unmarshall params into a *MainProcessToRendererGetCustomerParams.
// 2. Dispatch the *MainProcessToRendererGetCustomerParams.
func rendererReceiveAndDispatchGetCustomer(params []byte, dispatch func(interface{})) {
	// 1. Unmarshall params into a *MainProcessToRendererGetCustomerParams.
	rxparams := &MainProcessToRendererGetCustomerParams{}
	if err := json.Unmarshal(params, rxparams); err != nil {
		// This error will only happend during the development stage.
		// It means a conflict with the txparams in func mainProcessReceiveGetCustomer defined about.
		rxparams = &MainProcessToRendererGetCustomerParams{
			Error:        true,
			ErrorMessage: err.Error(),
		}
	}
	// 2. Dispatch the *MainProcessToRendererGetCustomerParams to the renderer panel callers that want to handle the GetCustomer call backs.
	dispatch(rxparams)
}

/*

	So here is some renderer code.
	This is some code for a panel's caller file.

	import 	"github.com/josephbudd/kickwasm/examples/contacts/mainprocess/calls"

	func (caller *Caller) setCallBacks() {
		caller.lpc.GetCustomer.AddCallBack(caller.getCustomerCB)
	}

	// getCustomer calls the main process GetCustomer procedure.
	func (caller *Caller) getCustomer(id uint64) {
		params := &calls.RendererToMainProcessGetCustomerParams{
			ID: id,
		}
		if err := caller.lpc.GetCustomer.CallMainProcess(params); err != nil {
			caller.tools.Error(err.Error())
		}
	}

	// getCustomerCB handles a call back from the main process.
	// This func is simple:
	// Use switch params.(type) to get the *calls.MainProcessToRendererGetCustomerParams.
	// 1. Process the params.
	func (caller *Caller) getCustomerCB(params interface{}) {
		switch params.(type) {
		case *calls.MainProcessToRendererGetCustomerParams:
			if params.Error {
				caller.tools.Error(params.ErrorMessage)
				return
			}
			// No errors so show the customer record.
			caller.presenter.showCustomer(params.Record)
		default:
			// default should only happen during development.
			// It means that the mainprocess func "mainProcessReceiveGetCustomer" passed the wrong type of param to callBackToRenderer.
			caller.tools.Error("Wrong param type send from mainProcessReceiveGetCustomer")
		}
	}

*/

