package main

import (
	"github.com/josephbudd/kickwasm/examples/contacts/domain/interfaces/caller"
	"github.com/josephbudd/kickwasm/examples/contacts/domain/types"
	"github.com/josephbudd/kickwasm/examples/contacts/renderer/interfaces/panelHelper"
	"github.com/josephbudd/kickwasm/examples/contacts/renderer/notjs"
	"github.com/josephbudd/kickwasm/examples/contacts/renderer/panels/AboutButton/AboutTabBarPanel/CreditTab/CreditTabPanel"
	"github.com/josephbudd/kickwasm/examples/contacts/renderer/panels/AboutButton/AboutTabBarPanel/LiscenseTab/LiscenseTabPanel"
	"github.com/josephbudd/kickwasm/examples/contacts/renderer/panels/AboutButton/AboutTabBarPanel/RecordsTab/RecordsTabPanel"
	"github.com/josephbudd/kickwasm/examples/contacts/renderer/panels/AddButton/AddContactPanel"
	"github.com/josephbudd/kickwasm/examples/contacts/renderer/panels/EditButton/EditContactEditPanel"
	"github.com/josephbudd/kickwasm/examples/contacts/renderer/panels/EditButton/EditContactNotReadyPanel"
	"github.com/josephbudd/kickwasm/examples/contacts/renderer/panels/EditButton/EditContactSelectPanel"
	"github.com/josephbudd/kickwasm/examples/contacts/renderer/panels/RemoveButton/RemoveContactConfirmPanel"
	"github.com/josephbudd/kickwasm/examples/contacts/renderer/panels/RemoveButton/RemoveContactNotReadyPanel"
	"github.com/josephbudd/kickwasm/examples/contacts/renderer/panels/RemoveButton/RemoveContactSelectPanel"
	"github.com/josephbudd/kickwasm/examples/contacts/renderer/viewtools"
)

/*

	DO NOT EDIT THIS FILE.

	This file is generated by kickasm and regenerated by rekickasm.

*/

func doPanels(quitCh chan struct{}, tools *viewtools.Tools, callMap map[types.CallID]caller.Renderer, notJS *notjs.NotJS, helper panelHelper.Helper) (err error) {
	// 1. Construct the panel code.
	var addContactPanel *AddContactPanel.Panel
	if addContactPanel, err = AddContactPanel.NewPanel(quitCh, tools, notJS, callMap, helper); err != nil {
		return
	}
	var creditTabPanel *CreditTabPanel.Panel
	if creditTabPanel, err = CreditTabPanel.NewPanel(quitCh, tools, notJS, callMap, helper); err != nil {
		return
	}
	var editContactEditPanel *EditContactEditPanel.Panel
	if editContactEditPanel, err = EditContactEditPanel.NewPanel(quitCh, tools, notJS, callMap, helper); err != nil {
		return
	}
	var editContactNotReadyPanel *EditContactNotReadyPanel.Panel
	if editContactNotReadyPanel, err = EditContactNotReadyPanel.NewPanel(quitCh, tools, notJS, callMap, helper); err != nil {
		return
	}
	var editContactSelectPanel *EditContactSelectPanel.Panel
	if editContactSelectPanel, err = EditContactSelectPanel.NewPanel(quitCh, tools, notJS, callMap, helper); err != nil {
		return
	}
	var liscenseTabPanel *LiscenseTabPanel.Panel
	if liscenseTabPanel, err = LiscenseTabPanel.NewPanel(quitCh, tools, notJS, callMap, helper); err != nil {
		return
	}
	var recordsTabPanel *RecordsTabPanel.Panel
	if recordsTabPanel, err = RecordsTabPanel.NewPanel(quitCh, tools, notJS, callMap, helper); err != nil {
		return
	}
	var removeContactConfirmPanel *RemoveContactConfirmPanel.Panel
	if removeContactConfirmPanel, err = RemoveContactConfirmPanel.NewPanel(quitCh, tools, notJS, callMap, helper); err != nil {
		return
	}
	var removeContactNotReadyPanel *RemoveContactNotReadyPanel.Panel
	if removeContactNotReadyPanel, err = RemoveContactNotReadyPanel.NewPanel(quitCh, tools, notJS, callMap, helper); err != nil {
		return
	}
	var removeContactSelectPanel *RemoveContactSelectPanel.Panel
	if removeContactSelectPanel, err = RemoveContactSelectPanel.NewPanel(quitCh, tools, notJS, callMap, helper); err != nil {
		return
	}

	// 2. Size the app.
	tools.SizeApp()

	// 3. Start each panel's initial calls.
	addContactPanel.InitialCalls()
	creditTabPanel.InitialCalls()
	editContactEditPanel.InitialCalls()
	editContactNotReadyPanel.InitialCalls()
	editContactSelectPanel.InitialCalls()
	liscenseTabPanel.InitialCalls()
	recordsTabPanel.InitialCalls()
	removeContactConfirmPanel.InitialCalls()
	removeContactNotReadyPanel.InitialCalls()
	removeContactSelectPanel.InitialCalls()

	return
}
