package main

import (
	"github.com/josephbudd/kickwasm/examples/contacts/domain/interfaces/caller"
	"github.com/josephbudd/kickwasm/examples/contacts/domain/types"
	"github.com/josephbudd/kickwasm/examples/contacts/renderer/interfaces/panelHelper"
	"github.com/josephbudd/kickwasm/examples/contacts/renderer/notjs"
	"github.com/josephbudd/kickwasm/examples/contacts/renderer/panels/AboutButton/AboutTabBarPanel/AboutTab/AboutTabPanel"
	"github.com/josephbudd/kickwasm/examples/contacts/renderer/panels/AboutButton/AboutTabBarPanel/LiscenseTab/LiscenseTabPanel"
	"github.com/josephbudd/kickwasm/examples/contacts/renderer/panels/AboutButton/AboutTabBarPanel/RecordsTab/RecordsTabPanel"
	"github.com/josephbudd/kickwasm/examples/contacts/renderer/panels/AddButton/AddContactPanel"
	"github.com/josephbudd/kickwasm/examples/contacts/renderer/panels/EditButton/EditContactEditPanel"
	"github.com/josephbudd/kickwasm/examples/contacts/renderer/panels/EditButton/EditContactNotReadyPanel"
	"github.com/josephbudd/kickwasm/examples/contacts/renderer/panels/EditButton/EditContactSelectPanel"
	"github.com/josephbudd/kickwasm/examples/contacts/renderer/panels/RemoveButton/RemoveContactConfirmPanel"
	"github.com/josephbudd/kickwasm/examples/contacts/renderer/panels/RemoveButton/RemoveContactNotReadyPanel"
	"github.com/josephbudd/kickwasm/examples/contacts/renderer/panels/RemoveButton/RemoveContactSelectPanel"
	"github.com/josephbudd/kickwasm/examples/contacts/renderer/viewtools"
)

/*

	DO NOT EDIT THIS FILE.

	This file is generated by kickasm and regenerated by rekickasm.

*/

func doPanels(quitCh chan struct{}, tools *viewtools.Tools, callMap map[types.CallID]caller.Renderer, notJS *notjs.NotJS, helper panelHelper.Helper) (err error) {
	// 1. Construct the panel code.
	var aboutTabPanel *abouttabpanel.Panel
	if aboutTabPanel, err = abouttabpanel.NewPanel(quitCh, tools, notJS, callMap, helper); err != nil {
		return
	}
	var addContactPanel *addcontactpanel.Panel
	if addContactPanel, err = addcontactpanel.NewPanel(quitCh, tools, notJS, callMap, helper); err != nil {
		return
	}
	var editContactEditPanel *editcontacteditpanel.Panel
	if editContactEditPanel, err = editcontacteditpanel.NewPanel(quitCh, tools, notJS, callMap, helper); err != nil {
		return
	}
	var editContactNotReadyPanel *editcontactnotreadypanel.Panel
	if editContactNotReadyPanel, err = editcontactnotreadypanel.NewPanel(quitCh, tools, notJS, callMap, helper); err != nil {
		return
	}
	var editContactSelectPanel *editcontactselectpanel.Panel
	if editContactSelectPanel, err = editcontactselectpanel.NewPanel(quitCh, tools, notJS, callMap, helper); err != nil {
		return
	}
	var liscenseTabPanel *liscensetabpanel.Panel
	if liscenseTabPanel, err = liscensetabpanel.NewPanel(quitCh, tools, notJS, callMap, helper); err != nil {
		return
	}
	var recordsTabPanel *recordstabpanel.Panel
	if recordsTabPanel, err = recordstabpanel.NewPanel(quitCh, tools, notJS, callMap, helper); err != nil {
		return
	}
	var removeContactConfirmPanel *removecontactconfirmpanel.Panel
	if removeContactConfirmPanel, err = removecontactconfirmpanel.NewPanel(quitCh, tools, notJS, callMap, helper); err != nil {
		return
	}
	var removeContactNotReadyPanel *removecontactnotreadypanel.Panel
	if removeContactNotReadyPanel, err = removecontactnotreadypanel.NewPanel(quitCh, tools, notJS, callMap, helper); err != nil {
		return
	}
	var removeContactSelectPanel *removecontactselectpanel.Panel
	if removeContactSelectPanel, err = removecontactselectpanel.NewPanel(quitCh, tools, notJS, callMap, helper); err != nil {
		return
	}

	// 2. Size the app.
	tools.SizeApp()

	// 3. Start each panel's initial calls.
	aboutTabPanel.InitialCalls()
	addContactPanel.InitialCalls()
	editContactEditPanel.InitialCalls()
	editContactNotReadyPanel.InitialCalls()
	editContactSelectPanel.InitialCalls()
	liscenseTabPanel.InitialCalls()
	recordsTabPanel.InitialCalls()
	removeContactConfirmPanel.InitialCalls()
	removeContactNotReadyPanel.InitialCalls()
	removeContactSelectPanel.InitialCalls()

	return
}
