package dispatch

import (
	"context"
	"log"
	"time"

	"github.com/josephbudd/kickwasm/examples/spawnwidgets/domain/lpc/message"
	"github.com/josephbudd/kickwasm/examples/spawnwidgets/domain/store"
	"github.com/josephbudd/kickwasm/examples/spawnwidgets/mainprocess/lpc"
)

var startedCh = make(chan struct{}, 1)

/*
	DO NOT EDIT THIS FILE.

	USE THE TOOL kicklpc TO ADD OR REMOVE LPC Messages.

	kicklpc will edit this file for you.

*/

func init() {
	go worry()
}

// Do dispatches local process communications messages received from the renderer.
// They are dispatched to the main process handlers here in package dispatch.
// You are required to code the functionality into those handlers.
func Do(ctx context.Context, cargo interface{}, sending lpc.Sending, stores *store.Stores, errChan chan error) {
	switch cargo := cargo.(type) {
	case *message.LogRendererToMainProcess:
		handleLog(ctx, cargo, sending, errChan)
	case *message.InitRendererToMainProcess:
		// Init signals that
		// * the renderer process is up and running,
		// * the main process may push messages to the renderer process.
		startedCh <- struct{}{}
		handleInit(ctx, cargo, sending, stores, errChan)
	default:
		log.Println("dispatch Do: unknown cargo type.")
	}
	return
}

func worry() {
	// If the renderer process hasn't started after 5 seconds
	//  then inform the user to manually start it.
	t := time.After(5 * time.Second)
	select {
	case <-startedCh:
		break
	case <-t:
		log.Println(lpc.WorryMessage)
	}
}

