package main

import (
	"fmt"
	"html/template"
	"net/http"
	"os"
	"path/filepath"
	"strings"

	"github.com/josephbudd/kickwasm/examples/colorssitepack"

	"github.com/josephbudd/kickwasm/examples/colors/domain/data/filepaths"
)

/*

	DO NOT EDIT THIS FILE.

	This file is generated by kickasm and regenerated by rekickasm.

*/

const (
	mainTemplate = "main.tmpl"
	headTemplate = "Head.tmpl"
)

// homeEmptyInsidePanelNamePathMap maps each markup panel template name to it's file path.
var homeEmptyInsidePanelNamePathMap = map[string]map[string][]string{"Action1Button": map[string][]string{"Action1Level1MarkupPanel": []string{"Action1Button", "Action1Level1ButtonPanel", "Action1Level1ContentButton"}, "Action1Level2MarkupPanel": []string{"Action1Button", "Action1Level1ButtonPanel", "Action1ToLevel2ColorsButton", "Action1Level2ButtonPanel", "Action1Level2ContentButton"}, "Action1Level3MarkupPanel": []string{"Action1Button", "Action1Level1ButtonPanel", "Action1ToLevel2ColorsButton", "Action1Level2ButtonPanel", "Action1ToLevel3ColorsButton", "Action1Level3ButtonPanel", "Action1Level3ContentButton"}, "Action1Level4MarkupPanel": []string{"Action1Button", "Action1Level1ButtonPanel", "Action1ToLevel2ColorsButton", "Action1Level2ButtonPanel", "Action1ToLevel3ColorsButton", "Action1Level3ButtonPanel", "Action1ToLevel4ColorsButton", "Action1Level4ButtonPanel", "Action1Level4ContentButton"}, "Action1Level5MarkupPanel": []string{"Action1Button", "Action1Level1ButtonPanel", "Action1ToLevel2ColorsButton", "Action1Level2ButtonPanel", "Action1ToLevel3ColorsButton", "Action1Level3ButtonPanel", "Action1ToLevel4ColorsButton", "Action1Level4ButtonPanel", "Action1ToLevel5ColorsButton", "Action1Level5ButtonPanel", "Action1Level5ContentButton"}}, "Action2Button": map[string][]string{"Action2Level1MarkupPanel": []string{"Action2Button", "Action2Level1ButtonPanel", "Action2Level1ContentButton"}, "Action2Level2MarkupPanel": []string{"Action2Button", "Action2Level1ButtonPanel", "Action2ToLevel2ColorsButton", "Action2Level2ButtonPanel", "Action2Level2ContentButton"}, "Action2Level3MarkupPanel": []string{"Action2Button", "Action2Level1ButtonPanel", "Action2ToLevel2ColorsButton", "Action2Level2ButtonPanel", "Action2ToLevel3ColorsButton", "Action2Level3ButtonPanel", "Action2Level3ContentButton"}, "Action2Level4MarkupPanel": []string{"Action2Button", "Action2Level1ButtonPanel", "Action2ToLevel2ColorsButton", "Action2Level2ButtonPanel", "Action2ToLevel3ColorsButton", "Action2Level3ButtonPanel", "Action2ToLevel4ColorsButton", "Action2Level4ButtonPanel", "Action2Level4ContentButton"}, "Action2Level5MarkupPanel": []string{"Action2Button", "Action2Level1ButtonPanel", "Action2ToLevel2ColorsButton", "Action2Level2ButtonPanel", "Action2ToLevel3ColorsButton", "Action2Level3ButtonPanel", "Action2ToLevel4ColorsButton", "Action2Level4ButtonPanel", "Action2ToLevel5ColorsButton", "Action2Level5ButtonPanel", "Action2Level5ContentButton"}}, "Action3Button": map[string][]string{"Action3Level1MarkupPanel": []string{"Action3Button", "Action3Level1ButtonPanel", "Action3Level1ContentButton"}, "Action3Level2MarkupPanel": []string{"Action3Button", "Action3Level1ButtonPanel", "Action3ToLevel2ColorsButton", "Action3Level2ButtonPanel", "Action3Level2ContentButton"}, "Action3Level3MarkupPanel": []string{"Action3Button", "Action3Level1ButtonPanel", "Action3ToLevel2ColorsButton", "Action3Level2ButtonPanel", "Action3ToLevel3ColorsButton", "Action3Level3ButtonPanel", "Action3Level3ContentButton"}, "Action3Level4MarkupPanel": []string{"Action3Button", "Action3Level1ButtonPanel", "Action3ToLevel2ColorsButton", "Action3Level2ButtonPanel", "Action3ToLevel3ColorsButton", "Action3Level3ButtonPanel", "Action3ToLevel4ColorsButton", "Action3Level4ButtonPanel", "Action3Level4ContentButton"}, "Action3Level5MarkupPanel": []string{"Action3Button", "Action3Level1ButtonPanel", "Action3ToLevel2ColorsButton", "Action3Level2ButtonPanel", "Action3ToLevel3ColorsButton", "Action3Level3ButtonPanel", "Action3ToLevel4ColorsButton", "Action3Level4ButtonPanel", "Action3ToLevel5ColorsButton", "Action3Level5ButtonPanel", "Action3Level5ContentButton"}}, "Action4Button": map[string][]string{"Action4Level1MarkupPanel": []string{"Action4Button", "Action4Level1ButtonPanel", "Action4Level1ContentButton"}, "Action4Level2MarkupPanel": []string{"Action4Button", "Action4Level1ButtonPanel", "Action4ToLevel2ColorsButton", "Action4Level2ButtonPanel", "Action4Level2ContentButton"}, "Action4Level3MarkupPanel": []string{"Action4Button", "Action4Level1ButtonPanel", "Action4ToLevel2ColorsButton", "Action4Level2ButtonPanel", "Action4ToLevel3ColorsButton", "Action4Level3ButtonPanel", "Action4Level3ContentButton"}, "Action4Level4MarkupPanel": []string{"Action4Button", "Action4Level1ButtonPanel", "Action4ToLevel2ColorsButton", "Action4Level2ButtonPanel", "Action4ToLevel3ColorsButton", "Action4Level3ButtonPanel", "Action4ToLevel4ColorsButton", "Action4Level4ButtonPanel", "Action4Level4ContentButton"}, "Action4Level5MarkupPanel": []string{"Action4Button", "Action4Level1ButtonPanel", "Action4ToLevel2ColorsButton", "Action4Level2ButtonPanel", "Action4ToLevel3ColorsButton", "Action4Level3ButtonPanel", "Action4ToLevel4ColorsButton", "Action4Level4ButtonPanel", "Action4ToLevel5ColorsButton", "Action4Level5ButtonPanel", "Action4Level5ContentButton"}}, "Action5Button": map[string][]string{"Action5Level1MarkupPanel": []string{"Action5Button", "Action5Level1ButtonPanel", "Action5Level1ContentButton"}, "Action5Level2MarkupPanel": []string{"Action5Button", "Action5Level1ButtonPanel", "Action5ToLevel2ColorsButton", "Action5Level2ButtonPanel", "Action5Level2ContentButton"}, "Action5Level3MarkupPanel": []string{"Action5Button", "Action5Level1ButtonPanel", "Action5ToLevel2ColorsButton", "Action5Level2ButtonPanel", "Action5ToLevel3ColorsButton", "Action5Level3ButtonPanel", "Action5Level3ContentButton"}, "Action5Level4MarkupPanel": []string{"Action5Button", "Action5Level1ButtonPanel", "Action5ToLevel2ColorsButton", "Action5Level2ButtonPanel", "Action5ToLevel3ColorsButton", "Action5Level3ButtonPanel", "Action5ToLevel4ColorsButton", "Action5Level4ButtonPanel", "Action5Level4ContentButton"}, "Action5Level5MarkupPanel": []string{"Action5Button", "Action5Level1ButtonPanel", "Action5ToLevel2ColorsButton", "Action5Level2ButtonPanel", "Action5ToLevel3ColorsButton", "Action5Level3ButtonPanel", "Action5ToLevel4ColorsButton", "Action5Level4ButtonPanel", "Action5ToLevel5ColorsButton", "Action5Level5ButtonPanel", "Action5Level5ContentButton"}}}

// serveMainHTML only serves up main.tmpl with all of the templates for your markup panels.
func serveMainHTML(w http.ResponseWriter) {
	var err error
	var masterT, tmpl *template.Template
	var tpath, s string
	var bb []byte
	var found bool
	var fname string
	var l int

	templateFolderPath := filepaths.GetShortTemplatePath()
	// main.tmpl
	tpath = filepath.Join(templateFolderPath, mainTemplate)
	if bb, found = colorssitepack.Contents(tpath); !found {
		http.Error(w, fmt.Sprintf("Not found. (%s)", mainTemplate), 404)
		return
	}
	l += len(bb)
	masterT = template.New(mainTemplate)
	s = string(bb)
	if _, err = masterT.Parse(s); err != nil {
		http.Error(w, err.Error(), 300)
		return
	}
	// head.tmpl
	// the head template which contains
	//  * any css imports
	//  * any javascript imports
	tpath = filepath.Join(templateFolderPath, headTemplate)
	if bb, found = colorssitepack.Contents(tpath); !found {
		// add a head.tmpl template
		// it's ok if the template is not there
		// but if it's there use it.
		bb = []byte(fmt.Sprintf("%[1]s%[1]s define %[3]q %[2]s%[2]s<!-- You do not have a %[3]s file to import any files you added in the site/ folder. Feel free to add a %[3]s file in the site/template folder. -->%[1]s%[1]s end %[2]s%[2]s", "{", "}", headTemplate))
	}
	tmpl = masterT.New(headTemplate)
	l += len(bb)
	s = string(bb)
	if _, err = tmpl.Parse(s); err != nil {
		http.Error(w, err.Error(), 300)
	}
	// panel template files
	for _, namePathMap := range homeEmptyInsidePanelNamePathMap {
		for name, folders := range namePathMap {
			fname = name + ".tmpl"
			folderPath := strings.Join(folders, string(os.PathSeparator))
			tpath := filepath.Join(templateFolderPath, folderPath, fname)
			if bb, found = colorssitepack.Contents(tpath); !found {
				http.Error(w, fmt.Sprintf("Not found. (%s)", fname), 404)
				return
			}
			l += len(bb)
			tmpl = masterT.New(fname)
			s = string(bb)
			if _, err = tmpl.Parse(s); err != nil {
				http.Error(w, err.Error(), 300)
			}
		}
	}
	// send the html
	if err = masterT.ExecuteTemplate(w, mainTemplate, nil); err != nil {
		if !strings.Contains(err.Error(), "reset") {
			http.Error(w, err.Error(), 300)
		}
	}
}
