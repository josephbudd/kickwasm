
ABOUT THE FILES IN THE FOLDER domain/lpc/message/.

* Init.go was generated by kickwasm when this framework was created.
  The file contains the types of the 2 Init messages.
  1. InitRendererToMainProcess is the message that the renderer sends to the main process.
     The message signals that
     * the renderer process is up and running,
     * the main process may push messages to the renderer process.
     The message is sent from rendererprocess/Main.go which you can edit.
  2. LogMainProcessToRenderer is the message that the main process sends to the renderer.
     * You may or may not have a use for LogMainProcessToRenderer.

* Log.go was generated by kickwasm when this framework was created.
  The file contains the types of the 2 Log messages.
  1. LogRendererToMainProcess is the message that the renderer sends to the main process.
     * It will log the message to the application's logger.
  2. LogMainProcessToRenderer is the message that the main process sends to the renderer.
     * You may or may not have a use for LogMainProcessToRenderer.

ABOUT THE FILES IN THE FOLDER mainprocess/lpc/dispatch/.

  * mainprocess/lpc/dispatch/dispatch.go contains func Do which dispatches the LPC ( Local Process Communications ) messages received from the renderer to the main process.
    Do not edit the file dispatch.go.
    In func Do, the messages are dispatched to the LPC message handlers also in mainprocess/lpc/dispatch/.

  Message handler files:

  * mainprocess/lpc/dispatch/Init.go was generated by kickwasm when this framework was created.
    The file contains func handleInit(rxMessage *message.InitRendererToMainProcess, sending lpc.Sending, eojing lpc.EOJer, stores *store.Stores).
    kickwasm created func handleInit void of any functionality so that it's functionality could to be coded.
    You could for example, start a main process home which pushes messages to the renderer process.
    You may edit the file if you need to give func handleInit functionality.

  * mainprocess/lpc/dispatch/Log.go was generated by kickwasm when this framework was created.
    The file contains func handleLog(rxMessage *message.LogRendererToMainProcess, sending lpc.Sending)
      which processes the log message received from the renderer.
    You may edit the file if you need to.

MANAGING LPC MESSAGES WITH kicklpc.

* Use kicklpc in this application's root folder:
  $ cd github.com/josephbudd/kickwasm/examples/colors/

* Listing all of the messages:
  $ kicklpc -l
  1. kicklpc would
    * Display the names of each LPC message.

* Adding a message:
  $ kicklpc -add UpdateCustomer
  1. kicklpc would
    * Add the file domain/lpc/UpdateCustomer.go
    * Add the file mainprocess/lpc/dispatch/UpdateCustomer.go
    * Update the file mainprocess/lpc/dispatch/dispatch.go
  2. You would need to
  * Complete the message definitions in domain/lpc/UpdateCustomer.go
  * Complete the func handleUpdateCustomer in mainprocess/lpc/dispatch/UpdateCustomer.go

* Deleting a message:
  $ kicklpc -delete-forever UpdateCustomer
  1. kicklpc would
    * Delete the file domain/lpc/UpdateCustomer.go
    * Delete the file mainprocess/lpc/dispatch/UpdateCustomer.go
    * Update the file mainprocess/lpc/dispatch/dispatch.go
