package helloworldtemplatepanel

import (
	"fmt"
	"syscall/js"

	"github.com/pkg/errors"

	"github.com/josephbudd/kickwasm/examples/spawntabs/renderer/lpc"
	"github.com/josephbudd/kickwasm/examples/spawntabs/renderer/notjs"
	"github.com/josephbudd/kickwasm/examples/spawntabs/renderer/paneling"
	"github.com/josephbudd/kickwasm/examples/spawntabs/renderer/viewtools"
)

/*

	Panel name: HelloWorldTemplatePanel

*/

/*

	DO NOT EDIT THIS FILE.

*/

// Prepare prepares the panel to be spawned.
// This is called once by package main when the application starts.
func Prepare(quitChan, eojChan chan struct{}, receiveChan lpc.Receiving, sendChan lpc.Sending, vtools *viewtools.Tools, njs *notjs.NotJS, phelp *paneling.Help) {
	quitCh = quitChan
	eojCh = eojChan
	receiveCh = receiveChan
	sendCh = sendChan
	tools = vtools
	notJS = njs
	help = phelp
}

// BuildPanel builds the panel's go code.
// Returns the error.
func BuildPanel(uniqueID uint64, tabButton, tabPanelHeader js.Value, panelNameID map[string]string, panelData interface{}, unspawn func() error) (stopListener func(), err error) {

	defer func() {
		if err != nil {
			message := fmt.Sprintf("%s.BuildPanel()", "helloworldtemplatepanel")
			err = errors.WithMessage(err, message)
		}
	}()

	// make the panel
	panel := newPanel(uniqueID, tabButton, tabPanelHeader, panelNameID, panelData, unspawn)
	stopListener = panel.StopListener

	if err = panel.group.defineMembers(); err != nil {
		return
	}
	if err = panel.controller.defineControlsSetHandlers(); err != nil {
		return
	}
	if err = panel.presenter.defineMembers(); err != nil {
		return
	}
	panel.caller.listen()
	panel.controller.initialCalls()
	panel.caller.initialCalls()

	return
}

// StopListener stops the caller's go routine listening for messages.
func (panel *spawnedPanel) StopListener() {
	panel.caller.UnSpawningCh <- struct{}{}
}
