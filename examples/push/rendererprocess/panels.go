// +build js, wasm

package main

import (
	"github.com/pkg/errors"

	"github.com/josephbudd/kickwasm/examples/push/rendererprocess/lpc"
	"github.com/josephbudd/kickwasm/examples/push/rendererprocess/notjs"
	"github.com/josephbudd/kickwasm/examples/push/rendererprocess/paneling"
	pushpanel "github.com/josephbudd/kickwasm/examples/push/rendererprocess/panels/PushButton/PushPanel"
	"github.com/josephbudd/kickwasm/examples/push/rendererprocess/viewtools"
)

/*

	DO NOT EDIT THIS FILE.

	This file is generated by kickasm and regenerated by rekickasm.

*/

func doPanels(quitChan, eojChan chan struct{}, receiveChan lpc.Receiving, sendChan lpc.Sending,
	tools *viewtools.Tools, notJS *notjs.NotJS, help *paneling.Help) (err error) {
	
	defer func() {
		if err != nil {
			err = errors.WithMessage(err, "doPanels")
			tools.ConsoleLog("Error: " + err.Error())
		}
	}()

	// 1. Prepare the spawn panels.

	// 2. Construct the panel code.
	var pushPanel *pushpanel.Panel
	if pushPanel, err = pushpanel.NewPanel(quitChan, eojChan, receiveChan, sendChan, tools, notJS, help); err != nil {
		return
	}

	// 3. Size the app.
	tools.SizeApp()

	// 4. Start each panel's message and event dispatchers.
	pushPanel.StartDispatchers()

	// 5. Start each panel's initial calls.
	pushPanel.InitialJobs()

	return
}
