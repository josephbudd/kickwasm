// +build js, wasm

package framework

import (
	"context"
	"fmt"
	"log"


	"github.com/josephbudd/kickwasm/examples/push/rendererprocess/framework/lpc"
	"github.com/josephbudd/kickwasm/examples/push/rendererprocess/framework/viewtools"
	"github.com/josephbudd/kickwasm/examples/push/rendererprocess/paneling"
	pushpanel "github.com/josephbudd/kickwasm/examples/push/rendererprocess/panels/PushButton/PushPanel"
)

/*

	DO NOT EDIT THIS FILE.

	This file is generated by kickasm and regenerated by rekickasm.

*/

// DoMarkupPanels builds and runs the markup panels.
func DoMarkupPanels(ctx context.Context, ctxCancel context.CancelFunc, receiveChan lpc.Receiving, sendChan lpc.Sending, help *paneling.Help) (err error) {
	
	defer func() {
		if err != nil {
			err = fmt.Errorf("DoMarkupPanels: %w", err)
			log.Println("Error: " + err.Error())
		}
	}()

	// 1. Prepare the spawn panels.

	// 2. Construct the panel code.
	var pushPanel *pushpanel.Panel
	if pushPanel, err = pushpanel.NewPanel(ctx, ctxCancel, receiveChan, sendChan, help); err != nil {
		return
	}

	// 3. Size the app.
	viewtools.SizeApp()

	// 4. Start each panel's message and event dispatchers.
	pushPanel.StartDispatchers()

	// 5. Start each panel's initial calls.
	pushPanel.InitialJobs()

	return
}
