package templates

// MainGo is the main.go template.
const MainGo = `{{$Dot := .}}{{$repo0 := index .Repos 0}}package main

import (
	"log"
	"net/http"
	"path/filepath"
	"strings"

	"github.com/boltdb/bolt"

	"{{.ApplicationGitPath}}{{.ImportMainProcessDataFilePaths}}"
	"{{.ApplicationGitPath}}{{.ImportMainProcessRepositoriesBolt}}"
	"{{.ApplicationGitPath}}{{.ImportMainProcessTransportsCalls}}"
	"{{.ApplicationGitPath}}{{.ImportMainProcessTransportsCallServer}}"
)

/*
	This file is generated by kick.
	You are free to edit this file.
	Rekick will always preserve this file for you.
*/

// TODO: Edit port.
const (
	host = "{{.Host}}"
	port = uint({{.Port}})
)

/*

	Repos:
	 * {{.ImportMainProcessBehaviorRepoi}} is the repo interfaces ( repo behaviors ).
	 * {{.ImportMainProcessRepositoriesBolt}} is the bolt implementations of the repoi interfaces.
	 * {{.ImportMainProcessDataRecords}} is the record definitions.

*/

var ({{range .Repos}}
	{{call $Dot.LowerCamelCase .}}Repo *boltdatabase.{{.}}BoltDB{{end}}
)

func main() {
	buildBoltRepos()
	defer {{call .LowerCamelCase $repo0}}Repo.Close()
	callsStruct, callsMap := calls.NewCallsAndMap({{range $i, $repo0 := .Repos}}{{if ne $i 0}}, {{end}}{{call $Dot.LowerCamelCase $repo0}}Repo{{end}}, nil)
	callServer := callserver.NewCallServer(host, port, callsMap, callsStruct)
	callServer.Run(serve)
}

// buildBoltRepos makes bolt data stores.
// Each store is the implementation of an interface defined in package repoi.
// Each store uses the same bolt database so closing one will close all.
func buildBoltRepos() {
	path, err := filepaths.BuildUserSubFoldersPath("boltdb")
	if err != nil {
		log.Fatalf("filepaths.BuildFolderPath error is %q.", err.Error())
	}
	path = filepath.Join(path, "allrepos.nosql")
	db, err := bolt.Open(path, filepaths.GetFmode(), nil)
	if err != nil {
		log.Fatalf("bolt.Open error is %q.", err.Error())
	}{{range .Repos}}
	{{call $Dot.LowerCamelCase .}}Repo = boltdatabase.New{{.}}BoltDB(db, path, filepaths.GetFmode()){{end}}
}

/*

	If for example you want this main process to serve your own css files in /renderer/widgetcss/.

	  1. In func serve below add the following 2 lines:
	    case strings.HasPrefix(r.URL.Path, "/widgetcss"):
			withDefaultHeaders(w, r, serveURLPath)

	  2. In the /renderer/ folder add the /widgetcss/ folder
	     Add your css files to the /renderer/widgetcss/ folder.

	  3. In the /renderer/templates/ folder create a "head.tmpl" file if you haven't already.
	     In /renderer/templates/head.tmpl add the line:
		  <style> @import url(widgetcss/vlist.css); </style>

*/

// serve serves files from renderer folders.
func serve(w http.ResponseWriter, r *http.Request) {
	if r.Method != "GET" {
		http.Error(w, "Method not allowed", 405)
		return
	}
	switch {
	case r.URL.Path == "/favicon.ico":
		withDefaultHeaders(w, r, serveFavIconPath)
	case r.URL.Path == "/":
		withDefaultHeaders(w, r, serveMain)
	case strings.HasPrefix(r.URL.Path, "/css"):
		withDefaultHeaders(w, r, serveURLPath)
	case strings.HasPrefix(r.URL.Path, "/wasm"):
		withDefaultWASMHeaders(w, r, serveURLPath)
	default:
		http.Error(w, "Not found", 404)
	}
}

func withDefaultHeaders(w http.ResponseWriter, r *http.Request, fn http.HandlerFunc) {
	header := w.Header()
	header.Set("Cache-Control", "no-cache")
	fn(w, r)
}

func withDefaultWASMHeaders(w http.ResponseWriter, r *http.Request, fn http.HandlerFunc) {
	header := w.Header()
	header.Set("Cache-Control", "no-cache")
	header.Set("Content-Type", "application/wasm")
	fn(w, r)
}

func serveFavIconPath(w http.ResponseWriter, r *http.Request) {
	http.ServeFile(w, r, filepaths.GetFaviconPath())
}

func serveMain(w http.ResponseWriter, r *http.Request) {
	// func serveMainHTML is in panelMap.go
	serveMainHTML(w)
}

func serveURLPath(w http.ResponseWriter, r *http.Request) {
	http.ServeFile(w, r, filepaths.BuildRendererPath(r.URL.Path))
}
`
