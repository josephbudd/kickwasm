package templates

// NoStoresGo is the stores.go file when there are no stores.
const NoStoresGo = `{{ $Dot := . }}package main

import (
	"{{.ApplicationGitPath}}{{.ImportDomainStore}}"
)

/*
	DO NOT EDIT THIS FILE.

	USE THE TOOL kickstore TO ADD OR REMOVE STORES.

	kickstore WILL EDIT THIS FILE FOR YOU.
*/

// buildStores makes the bolt data stores.
// However, you haven't added any stores yet.
func buildStores() (stores *store.Stores, err error) {
	stores = &store.Stores{}
	return
}
`

// StoresGo is the stores.go file.
const StoresGo = `{{ $Dot := . }}package main

import (
	"path/filepath"

	"github.com/pkg/errors"

	"{{.ApplicationGitPath}}{{.ImportDomainDataFilepaths}}"
	"{{.ApplicationGitPath}}{{.ImportDomainStore}}"
	"{{.ApplicationGitPath}}{{.ImportDomainStoreStoring}}"
)

/*
	DO NOT EDIT THIS FILE.

	USE THE TOOL kickstore TO ADD OR REMOVE STORES.

	kickstore will edit this file for you.

*/

// buildStores makes and opens the data stores.
// It makes each bolt data stores and opens the bolt database.
// It makes each remote data database store and opens it.
// All of the stores can be close with stores.Close()
func buildStores() (stores *store.Stores, err error) {

	defer func() {
		if err != nil {
			err = errors.WithMessage(err, "buildStores()")
		}
	}()
{{ if gt (len .BoltStores) 0 }}
	var path string
	if path, err = filepaths.BuildUserSubFoldersPath("boltdb"); err != nil {
		err = errors.WithMessage(err, "filepaths.BuildUserSubFoldersPath(\"boltdb\")")
		return
	}
	path = filepath.Join(path, "stores.nosql")
	stores = &store.Stores{
		// Local bolt stores.
{{ range (call .SameWidth .BoltStores) }}		{{.}}: storing.New{{ (call $Dot.TrimSpace .) }}LocalBoltStore(path, filepaths.GetFmode()),
{{ end }}{{ end }}{{ if gt (len .RemoteDBs) 0 }}
		// Remote databases.
{{ range (call .SameWidth .RemoteDBs) }}		{{.}}: storing.New{{ call $Dot.TrimSpace . }}RemoteDB(),
{{ end }}{{ end }}	}
	return
}
`
