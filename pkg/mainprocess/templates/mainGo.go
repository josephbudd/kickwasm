package templates

// MainGo is the main.go template.
const MainGo = `{{$Dot := .}}package main

import (
	"fmt"
	"log"
	"net"

	"{{.ApplicationGitPath}}{{.ImportDomainDataSettings}}"
	"{{.ApplicationGitPath}}{{.ImportDomainStore}}"
	"{{.ApplicationGitPath}}{{.ImportDomainTypes}}"
	"{{.ApplicationGitPath}}{{.ImportMainProcessLPC}}"
	"{{.ApplicationGitPath}}{{.ImportMainProcessLPCDispatch}}"
)

/*
	DO NOT EDIT THIS FILE.

	kicklpc and kickstore will alter this file.

*/

/*

	Data Storage:
	 * {{.ImportDomainStoreStorer}} is the storer interfaces.
	 * {{.ImportDomainStoreStoring}} is the bolt implementations of the storer interfaces.
	 * {{.ImportDomainStoreRecord}} is the record definitions.

*/

func main() {
	var err error
	// build the stores and setup the close.
	var stores *store.Stores
	if stores, err = buildStores(); err != nil {
		log.Println(err)
		return
	}
	// close the bolt store later.
	defer stores.Close()

	// get the application's host and port and then setup the listener.
	var appSettings *types.ApplicationSettings
	if appSettings, err = settings.NewApplicationSettings(); err != nil {
		log.Println(err)
		return
	}

	// initialize and start the listener.
	// the listener may have reset the address if "localhost:0".
	// use the listener's address.
	location := fmt.Sprintf("%s:%d", appSettings.Host, appSettings.Port)
	var listener net.Listener
	if listener, err = net.Listen("tcp", location); err != nil {
		log.Println(err)
		return
	}
	// get the channels
	sendChan, receiveChan, eojChan := lpc.Channels()
	quitChan := make(chan struct{}, 1)
	// process incoming lpcs.
	go func() {

		defer func() {
			log.Println("eoj for processing incoming lpcs.")
		}()

		// wait for the server to end and then stop lpc go funcs
		log.Println("listening for receiveChan")
		for {
			select {
			case cargo := <-receiveChan:
				log.Println("main: got cargo := <-receiveChan")
				dispatch.Do(cargo, sendChan, eojChan, stores)
			case <-quitChan:
				log.Println("main: got <-quitChan")
				eojChan.Signal()
				return
			}
		}
	}()
	// make the call server.
	server := lpc.NewServer(listener, quitChan, receiveChan, sendChan)
	server.Run(serve)
}
`

// PanelMapGo is the panelMap.go template for package main.
const PanelMapGo = `{{$Dot := .}}package main

import (
	"fmt"
	"html/template"
	"net/http"
	"os"
	"path/filepath"
	"strings"

	"{{.SitePackImportPath}}"
	"{{.ApplicationGitPath}}{{.ImportDomainDataFilepaths}}"
)

/*

	DO NOT EDIT THIS FILE.

	This file is generated by kickasm and regenerated by rekickasm.

*/

const (
	mainTemplate = "main.tmpl"
	headTemplate = "{{.FileNames.HeadDotTMPL}}"
)

// serviceEmptyInsidePanelNamePathMap maps each markup panel template name to it's file path.
var serviceEmptyInsidePanelNamePathMap = {{.ServiceEmptyInsidePanelNamePathMap}}

// serveMainHTML only serves up main.tmpl with all of the templates for your markup panels.
func serveMainHTML(w http.ResponseWriter) {
	var err error
	var masterT, tmpl *template.Template
	var tpath, s string
	var bb []byte
	var found bool
	var fname string
	var l int

	templateFolderPath := filepaths.GetShortTemplatePath()
	// main.tmpl
	tpath = filepath.Join(templateFolderPath, mainTemplate)
	if bb, found = {{.SitePackPackage}}.Contents(tpath); !found {
		http.Error(w, fmt.Sprintf("Not found. (%s)", mainTemplate), 404)
		return
	}
	l += len(bb)
	masterT = template.New(mainTemplate)
	s = string(bb)
	if _, err = masterT.Parse(s); err != nil {
		http.Error(w, err.Error(), 300)
		return
	}
	// head.tmpl
	// the head template which contains
	//  * any css imports
	//  * any javascript imports
	tpath = filepath.Join(templateFolderPath, headTemplate)
	if bb, found = {{.SitePackPackage}}.Contents(tpath); !found {
		// add a head.tmpl template
		// it's ok if the template is not there
		// but if it's there use it.
		bb = []byte(fmt.Sprintf("%[1]s%[1]s define %[3]q %[2]s%[2]s<!-- You do not have a %[3]s file to import any files you added in the site/ folder. Feel free to add a %[3]s file in the site/template folder. -->%[1]s%[1]s end %[2]s%[2]s", "{", "}", headTemplate))
	}
	tmpl = masterT.New(headTemplate)
	l += len(bb)
	s = string(bb)
	if _, err = tmpl.Parse(s); err != nil {
		http.Error(w, err.Error(), 300)
	}
	// panel template files
	for _, namePathMap := range serviceEmptyInsidePanelNamePathMap {
		for name, folders := range namePathMap {
			fname = name + ".tmpl"
			folderPath := strings.Join(folders, string(os.PathSeparator))
			tpath := filepath.Join(templateFolderPath, folderPath, fname)
			if bb, found = {{.SitePackPackage}}.Contents(tpath); !found {
				http.Error(w, fmt.Sprintf("Not found. (%s)", fname), 404)
				return
			}
			l += len(bb)
			tmpl = masterT.New(fname)
			s = string(bb)
			if _, err = tmpl.Parse(s); err != nil {
				http.Error(w, err.Error(), 300)
			}
		}
	}
	// send the html
	if err = masterT.ExecuteTemplate(w, mainTemplate, nil); err != nil {
		if !strings.Contains(err.Error(), "reset") {
			http.Error(w, err.Error(), 300)
		}
	}
}
`

// ServeGo is the serve.go template which is the web server.
const ServeGo = `package main

import (
	"log"
	"mime"
	"net/http"
	"path/filepath"
	"strings"

	"{{.SitePackImportPath}}"
	"{{.ApplicationGitPath}}{{.ImportDomainDataFilepaths}}"
)

const (
	wasmPrefix     = "/wasm"
	wasmExceDotJS  = "/wasm/wasm_exec.js"
	wasmAppDotWASM = "/wasm/app.wasm"
)

/*

	TODO: Modify func serve for your special needs.
	  
	If for example you want this main process to serve your own css files in /site/widgetcss/.

	  1. In func serve below add the following 2 lines:
	    case strings.HasPrefix(r.URL.Path, "/widgetcss"):
			withDefaultHeaders(w, r, serveURLPath)

	  2. In the /site/ folder add the /widgetcss/ folder
	     Add your css files to the /site/widgetcss/ folder.

	  3. In the /site/templates/ folder create a "head.tmpl" file if you haven't already.
	     In /site/templates/head.tmpl add the line:
		  <style> @import url(widgetcss/vlist.css); </style>

	  4. Rebuild the renderer process.
		 $ cd renderer/
		 $ build.sh

	  5. Rebuild the main process.
		 $ cd ..
		 $ go build

*/

// serve serves files from renderer folders.
func serve(w http.ResponseWriter, r *http.Request) {
	if r.Method != "GET" {
		http.Error(w, "Method not allowed", 405)
		return
	}
	switch {
	case r.URL.Path == "/":
		withDefaultHeaders(w, r, serveMain)
	case strings.HasPrefix(r.URL.Path, "/css"):
		withDefaultHeaders(w, r, serveFileStore)
	case strings.HasPrefix(r.URL.Path, "/mycss"):
		withDefaultHeaders(w, r, serveFileStore)
	case r.URL.Path == wasmExceDotJS:
		withDefaultHeaders(w, r, serveFileStore)
	case r.URL.Path == wasmAppDotWASM:
		withDefaultHeaders(w, r, serveFileStore)
	case r.URL.Path == "/favicon.ico":
		withDefaultHeaders(w, r, serveFileStore)
	default:
		http.Error(w, "Not found", 404)
	}
}

func withDefaultHeaders(w http.ResponseWriter, r *http.Request, fn http.HandlerFunc) {
	header := w.Header()
	header.Set("Cache-Control", "no-cache")
	fn(w, r)
}

func serveMain(w http.ResponseWriter, r *http.Request) {
	// func serveMainHTML is in panelMap.go
	serveMainHTML(w)
}

func serveFileStore(w http.ResponseWriter, r *http.Request) {
	var bb []byte
	var found bool
	var path string
	var urlPath string
	urlPath = r.URL.Path
	// fix url path
	if strings.HasPrefix(urlPath, wasmPrefix) {
		// the wasm prefix is only a flag to use wasm headers.
		// there is no wasm folder.
		urlPath = urlPath[len(wasmPrefix):]
	}
	path = filepath.Join(filepaths.GetShortSitePath(), urlPath)
	if bb, found = {{.SitePackPackage}}.Contents(path); !found {
		log.Printf("404 Error: %q not found", path)
		http.Error(w, "Not found", 404)
		return
	}
	header := w.Header()
	contentType := mime.TypeByExtension(filepath.Ext(urlPath))
	header.Set("Content-Type", contentType)
	var err error
	if _, err = w.Write(bb); err != nil {
		http.Error(w, err.Error(), 300)
	}
}
`
