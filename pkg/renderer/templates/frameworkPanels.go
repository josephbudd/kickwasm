package templates

// FrameworkDoPanelsGo is renderer/framework/panels.go.
const FrameworkDoPanelsGo = `{{$Dot := .}}// +build js, wasm

package framework

import (
	"fmt"
	"log"

{{ range .Imports }}
	{{.}}{{end}}
)

/*

	DO NOT EDIT THIS FILE.

	This file is generated by kickasm and regenerated by rekickasm.

*/

// DoPanels builds and runs the panels.
func DoPanels(quitChan, eojChan chan struct{}, receiveChan lpc.Receiving, sendChan lpc.Sending,
	help *paneling.Help) (err error) {
	
	defer func() {
		if err != nil {
			err = fmt.Errorf("DoPanels: %w", err)
			log.Println("Error: " + err.Error())
		}
	}()

	// 1. Prepare the spawn panels.{{ range $packageName, $path := .SpawnTabBarNamePath}}
	{{call $Dot.PackageNameCase $packageName}}.Prepare(quitChan, eojChan, receiveChan, sendChan, help){{end}}

	// 2. Construct the panel code.{{range $name, $path := .PanelNamePath}}
	var {{call $Dot.LowerCamelCase $name}} *{{call $Dot.PackageNameCase $name}}.Panel
	if {{call $Dot.LowerCamelCase $name}}, err = {{call $Dot.PackageNameCase $name}}.NewPanel(quitChan, eojChan, receiveChan, sendChan, help); err != nil {
		return
	}{{end}}

	// 3. Size the app.
	viewtools.SizeApp()

	// 4. Start each panel's message and event dispatchers.{{range $name, $path := .PanelNamePath}}
	{{call $Dot.LowerCamelCase $name}}.StartDispatchers(){{end}}

	// 5. Start each panel's initial calls.{{range $name, $path := .PanelNamePath}}
	{{call $Dot.LowerCamelCase $name}}.InitialJobs(){{end}}

	return
}
`
