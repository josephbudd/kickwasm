package templates

// PanelGroup is the genereric renderer group template.
const PanelGroup = `{{$Dot := .}}{{$lpg := len .PanelGroup}}// +build js, wasm

package {{call .PackageNameCase .PanelName}}

import (
	"syscall/js"

	"github.com/pkg/errors"

	"{{.ApplicationGitPath}}{{.ImportRendererMarkup}}"
	"{{.ApplicationGitPath}}{{.ImportRendererViewTools}}"
)

/*

	DO NOT EDIT THIS FILE.

	This file is generated by kickasm and regenerated by rekickasm.

*/

// panelGroup is a group of {{$lpg}} panel{{if gt $lpg 1}}s{{end}}.
// It also has {{if eq $lpg 1}}a {{end}}show panel func{{if gt $lpg 1}}s{{end}} for each panel in this panel group.
type panelGroup struct {{.StartBracket}}{{range $panel := .PanelGroup}}
	{{call $Dot.LowerCamelCase $panel.Name}} js.Value{{end}}
{{.EndBracket}}

func (group *panelGroup) defineMembers() (err error) {

	defer func() {
		if err != nil {
			err = errors.WithMessage(err, "(group *panelGroup) defineMembers()")
		}
	}()

    var panel *markup.Element
{{range $panel := .PanelGroup}} if panel = document.ElementByID("{{$panel.HTMLID}}"); panel == nil {
		err = errors.New("unable to find #{{$panel.HTMLID}}")
		return
    }
    group.{{call $Dot.LowerCamelCase $panel.Name}} = panel.JSValue()
{{end}}
	return
}

/*
	Show panel funcs.

	Call these from the controller, presenter and messenger.
*/{{if .IsTabSiblingPanel}}{{range $panel := .PanelGroup}}

// show{{$panel.Name}} shows the panel you named {{$panel.Name}} while hiding any other panels in this panel group.
// {{if eq $Dot.PanelName $panel.Name}}This{{else}}That{{end}} panel will become visible only when this group of panels becomes visible.
/* Your note for {{if eq $Dot.PanelName $panel.Name}}this{{else}}that{{end}} panel is:
{{$panel.Note}}
*/
func (group *panelGroup) show{{$panel.Name}}() {
	viewtools.ShowPanelInTabGroup(group.{{call $Dot.LowerCamelCase $panel.Name}})
}
{{end}}{{else}}{{range $panel := .PanelGroup}}

// show{{$panel.Name}} shows the panel you named {{$panel.Name}} while hiding any other panels in this panel group.
// {{if eq $Dot.PanelName $panel.Name}}This{{else}}That{{end}} panel's id is {{$panel.HTMLID}}.
// {{if eq $Dot.PanelName $panel.Name}}This{{else}}That{{end}} panel either becomes visible immediately or whenever this group of panels is made visible.  Whenever could be immediately if this panel group is currently visible.
// Param force boolean effects when {{if eq $Dot.PanelName $panel.Name}}this{{else}}that{{end}} panel becomes visible.
//  * if force is true then
//    immediately if the home button pad is not currently displayed;
//    whenever if the home button pad is currently displayed.
//  * if force is false then whenever.
/* Your note for {{if eq $Dot.PanelName $panel.Name}}this{{else}}that{{end}} panel is:
{{$panel.Note}}
*/
func (group *panelGroup) show{{$panel.Name}}(force bool) {
	viewtools.ShowPanelInButtonGroup(group.{{call $Dot.LowerCamelCase $panel.Name}}, force)
}{{end}}{{end}}
`
