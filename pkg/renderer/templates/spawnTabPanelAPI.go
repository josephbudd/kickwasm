package templates

// SpawnTabPanelAPI is the genereric renderer spawn data.go template.
const SpawnTabPanelAPI = `{{$Dot := .}}// +build js, wasm

package {{call .PackageNameCase .PanelName}}

import (
	"context"
	"fmt"

	"{{.ApplicationGitPath}}{{.ImportRendererLPC}}"
	"{{.ApplicationGitPath}}{{.ImportRendererMarkup}}"
	"{{.ApplicationGitPath}}{{.ImportRendererPaneling}}"
)

/*

	Panel name: {{.PanelName}}

*/

/*

	DO NOT EDIT THIS FILE.

*/

// Prepare prepares the panel to be spawned.
// This is called once by package main when the application starts.
func Prepare(ctxCancel context.CancelFunc, receiveChan lpc.Receiving, sendChan lpc.Sending, phelp *paneling.Help) {
	rendererProcessCtxCancel = ctxCancel
	receiveCh = receiveChan
	sendCh = sendChan
	help = phelp
}

// BuildPanel builds the panel's go code.
// Returns the error.
func BuildPanel(ctx context.Context, ctxCancel context.CancelFunc, uniqueID uint64, tabButton, tabPanelHeader *markup.Element, panelNameID map[string]string, panelData interface{}) (err error) {

	defer func() {
		if err != nil {
			err = fmt.Errorf("%s.BuildPanel(): %w", "{{call .PackageNameCase .PanelName}}", err)
		}
	}()

	// make the panel
	panel := newPanel(ctx, ctxCancel, uniqueID, tabButton, tabPanelHeader, panelNameID, panelData)
	if err = panel.group.defineMembers(); err != nil {
		return
	}
	if err = panel.controller.defineControlsHandlers(); err != nil {
		return
	}
	if err = panel.presenter.defineMembers(); err != nil {
		return
	}
	panel.messenger.dispatchMessages()
	panel.controller.initialCalls()
	panel.messenger.initialSends()
	return
}
`
