package templates

// ViewToolsTabBar is the renderer/viewtools/tabbar.go template.
const ViewToolsTabBar = `// +build js, wasm

package viewtools

import (
	"strings"
	"syscall/js"

	"{{.ApplicationGitPath}}{{.ImportRendererCallBack}}"
	"{{.ApplicationGitPath}}{{.ImportRendererEvent}}"
)

/*
	WARNING:

	DO NOT EDIT THIS FILE.

*/

// ForceTabButtonClick implements the behavior of a tab button being clicked by the user.
func ForceTabButtonClick(button js.Value) {
	handleTabButtonOnClick(button)
}

func initializeTabBar() {
	tabberLastPanelID = "{{.LastPanelID}}"
	tabberTabBarLastPanel = make(map[string]string, 20)
{{range $tabBarID, $lastPanelID := .LastPanelLevels}}
	// the level is the tab bar id.
	tabberTabBarLastPanel["{{$tabBarID}}"] = "{{$lastPanelID}}"{{end}}
	for id := range tabberTabBarLastPanel {
		if len(id) > 0 {
			f := func(e event.Event) (nilReturn interface{}) {
				if e.JSTarget.Get("tagName").String() != "BUTTON" {
					// The tab button is not known so ignore.
					return
				}
				handleTabButtonOnClick(e.JSTarget)
				return
			}
			tabbar := getElementByID(document, id)
			callback.AddEventHandler(f, tabbar, "click", false, 0)
		}
	}
}

func handleTabButtonOnClick(button js.Value) {
	if !HandleButtonClick() {
		return
	}
	setTabButtonFocus(button)
	nextpanelid := button.Get("id").String() + "Panel"
	if nextpanelid != tabberLastPanelID {
		// clear this level
		parts := strings.Split(nextpanelid, "-")
		nextpanellevel := parts[0]
		IDHide(tabberTabBarLastPanel[nextpanellevel])
		// show the next panel
		IDShow(nextpanelid)
		// remember next panel. it is now the last panel.
		tabberLastPanelID = nextpanelid
		tabberTabBarLastPanel[nextpanellevel] = nextpanelid
	}
	SizeApp()
}

func setTabButtonFocus(tabinfocus js.Value) {
	// focus the tab now in focus
	classList := tabinfocus.Get("classList")
	classList.Call("replace", UnSelectedTabClassName, SelectedTabClassName)
	p := tabinfocus.Get("parentNode")
	children := p.Get("children")
	l := children.Length()
	for i := 0; i < l; i++ {
		ch := children.Index(i)
		tagName := ch.Get("tagName").String()
		if ch != tabinfocus && tagName == "BUTTON" {
			classList := ch.Get("classList")
			if classList.Call("contains", SelectedTabClassName).Bool() {
				classList.Call("replace", SelectedTabClassName, UnSelectedTabClassName)
			}
		}
	}
}
`
