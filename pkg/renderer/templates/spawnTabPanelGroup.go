package templates

// SpawnTabPanelGroup is the genereric renderer spawns group template.
const SpawnTabPanelGroup = `{{$Dot := .}}{{$lpg := len .PanelGroup}}// +build js, wasm

package {{call .PackageNameCase .PanelName}}

import (
	"fmt"
	"syscall/js"

	"{{.ApplicationGitPath}}{{.ImportRendererAPIDOM}}"
	"{{.ApplicationGitPath}}{{.ImportRendererAPIMarkup}}"
	"{{.ApplicationGitPath}}{{.ImportRendererFrameworkViewTools}}"
)

/*

	DO NOT EDIT THIS FILE.

	This file is generated by kickasm and regenerated by rekickasm.

*/

// panelGroup is a group of {{$lpg}} panel{{if gt $lpg 1}}s{{end}}.
// It also has {{if eq $lpg 1}}a {{end}}show panel func{{if gt $lpg 1}}s{{end}} for each panel in this panel group.
type panelGroup struct {
	uniqueID    uint64
	document  *dom.DOM
	panelNameID map[string]string
{{range $panel := .PanelGroup}}
	{{call $Dot.LowerCamelCase $panel.Name}} js.Value{{end}}
}

func (group *panelGroup) defineMembers() (err error) {

	defer func() {
		if err != nil {
			err = fmt.Errorf("(group *panelGroup) defineMembers()")
		}
	}()

	var id string
    var panel *markup.Element
{{range $panel := .PanelGroup}}	id = viewtools.BuildSpawnTabButtonMarkupPanelID("{{$Dot.TabBarID}}", "{{$Dot.TabName}}", "{{$panel.Name}}", group.uniqueID)
    if panel = group.document.ElementByID(id); panel == nil {
		err = fmt.Errorf("unable to find #%s", id)
		return
    }
    group.{{call $Dot.LowerCamelCase $panel.Name}} = panel.JSValue()
{{end}}
	return
}

/*
	Show panel funcs.

	Call these from the controller, presenter and messenger.
*/{{range $panel := .PanelGroup}}

// show{{$panel.Name}} shows the panel you named {{$panel.Name}} while hiding any other panels in this panel group.
// {{if eq $Dot.PanelName $panel.Name}}This{{else}}That{{end}} panel will become visible only when this group of panels becomes visible.
/* Your note for {{if eq $Dot.PanelName $panel.Name}}this{{else}}that{{end}} panel is:
{{$panel.Note}}
*/
func (group *panelGroup) show{{$panel.Name}}() {
	viewtools.ShowPanelInTabGroup(group.{{call $Dot.LowerCamelCase $panel.Name}})
}{{end}}
`
