package templates

// ViewTools is the renderer/viewtools/viewtools.go template.
const ViewTools = `// +build js, wasm

package viewtools

import (
	"syscall/js"

	"{{.ApplicationGitPath}}{{.ImportRendererCallBack}}"
)

/*

WARNING:

DO NOT EDIT THIS FILE.

*/

// Visibility class names.
const (
	spawnIDReplacePattern  = "{{.SpawnIDReplacePattern}}"
	TabClassName           = "{{.Classes.Tab}}"
	SelectedTabClassName   = "{{.Classes.SelectedTab}}"
	UnSelectedTabClassName = "{{.Classes.UnSelectedTab}}"
	TabPanelClassName      = "{{.Classes.TabPanel}}"

	TabBarClassName      = "{{.Classes.TabBar}}"
	UnderTabBarClassName = "{{.Classes.UnderTabBar}}"

	PanelClassName                   = "{{.Classes.Panel}}"
	PanelWithHeadingClassName        = "{{.Classes.PanelWithHeading}}"
	PanelWithTabBarClassName         = "{{.Classes.PanelWithTabBar}}"
	PanelHeadingClassName            = "{{.Classes.PanelHeading}}"
	PanelHeadingLevelPrefixClassName = "{{.Classes.PanelHeadingLevelPrefix}}"
	TabPanelGroupClassName           = "{{.Classes.TabPanelGroup}}"
	UserContentClassName             = "{{.Classes.UserContent}}"
	ResizeMeWidthClassName           = "{{.Classes.ResizeMeWidth}}"

	SliderClassName                  = "{{.Classes.Slider}}"
	SliderPanelClassName             = "{{.Classes.SliderPanel}}"
	SliderPanelInnerClassName        = "{{.Classes.SliderPanelPad}}"
	SliderPanelInnerSiblingClassName = "{{.Classes.SliderPanelInnerSibling}}"
	SliderButtonPadClassName         = "{{.Classes.SliderButtonPad}}"

	SeenClassName       = "{{.Classes.Seen}}"
	UnSeenClassName     = "{{.Classes.UnSeen}}"
	ToBeSeenClassName   = "{{.Classes.ToBeSeen}}"
	ToBeUnSeenClassName = "{{.Classes.ToBeUnSeen}}"

	CookieCrumbClassName            = "{{.Classes.CookieCrumb}}"
	CookieCrumbLevelPrefixClassName = "{{.Classes.CookieCrumbLevelPrefix}}"

	VScrollClassName  = "{{.Classes.VScroll}}"
	HVScrollClassName = "{{.Classes.HVScroll}}"

	MasterID           = "{{.IDs.Master}}"
	HomeID             = "{{.IDs.Home}}"
	HomePadID          = "{{.IDs.HomePad}}"
	SliderID           = "{{.IDs.Slider}}"
	SliderBackID       = "{{.IDs.SliderBack}}"
	SliderCollectionID = "{{.IDs.SliderCollection}}"

	BackIDAttribute         = "{{.Attributes.BackID}}"
	BackColorLevelAttribute = "{{.Attributes.BackColorLevel}}"
)

var (
	document  js.Value
	global    js.Value
	alert     js.Value
	undefined js.Value
	null      js.Value

	body                               js.Value
	mainMasterview                     js.Value
	mainMasterviewHome                 js.Value
	mainMasterviewHomeButtonPad        js.Value
	mainMasterviewHomeSlider           js.Value
	mainMasterviewHomeSliderBack       js.Value
	mainMasterviewHomeSliderCollection js.Value

	// modal
	modalMasterView        js.Value
	modalMasterViewCenter  js.Value
	modalMasterViewH1      js.Value
	modalMasterViewMessage js.Value
	modalMasterViewClose   js.Value
	modalQueue = make([]*modalViewData, 5, 5)
	modalQueueLastIndex    = -1
	beingModal             bool
	modalCallBack          func()
	// black
	blackMasterView js.Value
	// groups
	buttonPanelsMap = make(map[string][]js.Value, 100)
	// slider
	here =  js.Undefined()
	backStack []js.Value
	// tabber
	tabberLastPanelID     string
	tabberTabBarLastPanel map[string]string
	// button locking
	buttonsLocked             bool
	buttonsLockedMessageTitle string
	buttonsLockedMessageText  string

	// spawns

	spawnID               uint64
	SpawnIDReplacePattern string

	// user content

	panelNameHVScroll = {{.PanelNameHVScroll}}

	// markup panels

	countMarkupPanels = {{.NumberOfMarkupPanels}}
	countSpawnedMarkupPanels int
	countWidgetsWaiting      int

	// spawned widgets

	spawnedWidgets = make(map[uint64]spawnedWidgetInfo, 100)

	// printing

	extraHeight   float64
	documentTitle string
	printTitle    string
)

func getElementByID(document js.Value, id string) (e js.Value) {
	e = document.Call("getElementById", id)
	return
}

func init() {
	global = js.Global()
	document = global.Get("document")
	alert = global.Get("alert")
	undefined = js.Undefined()
	null = js.Null()

	documentTitle = document.Get("title").String()
	printTitle = documentTitle

	SpawnIDReplacePattern = spawnIDReplacePattern
	bodies := document.Call("getElementsByTagName", "BODY")
	body = bodies.Index(0)
	mainMasterview = getElementByID(document, MasterID)
	mainMasterviewHome = getElementByID(document, HomeID)
	mainMasterviewHomeButtonPad = getElementByID(document, HomePadID)
	mainMasterviewHomeSlider = getElementByID(document, SliderID)
	mainMasterviewHomeSliderBack = getElementByID(document, SliderBackID)
	mainMasterviewHomeSliderCollection = getElementByID(document, SliderCollectionID)
	// modal
	modalMasterView = getElementByID(document, "modalInformationMasterView")
	modalMasterViewCenter = getElementByID(document, "modalInformationMasterView-center")
	modalMasterViewH1 = getElementByID(document, "modalInformationMasterView-h1")
	modalMasterViewMessage = getElementByID(document, "modalInformationMasterView-message")
	modalMasterViewClose = getElementByID(document, "modalInformationMasterView-close")
	modalQueue = make([]*modalViewData, 5, 5)
	modalQueueLastIndex = -1
	callback.AddEventHandler(handleModalMasterViewClose, modalMasterViewClose, "click", false, 0)
	// black
	blackMasterView = getElementByID(document, "blackMasterView")
	// Setup printing markup panels.
	callback.AddEventHandler(beforePrint, global, "beforeprint", false, 0)
	callback.AddEventHandler(afterPrint, global, "afterprint", false, 0)

	initializeGroups()
	initializeSlider()
	initializeResize()
	initializeTabBar()
}
`
