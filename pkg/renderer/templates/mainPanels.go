package templates

// MainDoPanelsGo is ./panels.go.
const MainDoPanelsGo = `{{$Dot := .}}package main

import (
	"github.com/pkg/errors"
{{ range .Imports }}
	{{.}}{{end}}
)

/*

	DO NOT EDIT THIS FILE.

	This file is generated by kickasm and regenerated by rekickasm.

*/

func doPanels(client *lpc.Client, quitChan, eojChan chan struct{}, receiveChan lpc.Receiving, sendChan lpc.Sending,
	tools *viewtools.Tools, notJS *notjs.NotJS, help *paneling.Help) (err error) {
	
	defer func() {
		if err != nil {
			err = errors.WithMessage(err, "doPanels")
			tools.ConsoleLog("Error: " + err.Error())
		}
	}()

	// 1. Prepare the spawn panels.{{ range $packageName, $path := .SpawnTabBarNamePath}}
	{{call $Dot.PackageNameCase $packageName}}.Prepare(client, quitChan, eojChan, receiveChan, sendChan, tools, notJS, help){{end}}

	// 2. Construct the panel code.{{range $name, $path := .PanelNamePath}}
	var {{call $Dot.LowerCamelCase $name}} *{{call $Dot.PackageNameCase $name}}.Panel
	if {{call $Dot.LowerCamelCase $name}}, err = {{call $Dot.PackageNameCase $name}}.NewPanel(quitChan, eojChan, receiveChan, sendChan, tools, notJS, help); err != nil {
		return
	}{{end}}

	// 3. Size the app.
	tools.SizeApp()

	// 4. Start each panel's listening for the main process.{{range $name, $path := .PanelNamePath}}
	{{call $Dot.LowerCamelCase $name}}.Listen(){{end}}

	// 5. Start each panel's initial calls.{{range $name, $path := .PanelNamePath}}
	{{call $Dot.LowerCamelCase $name}}.InitialCalls(){{end}}

	return
}
`
