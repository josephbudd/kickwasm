package templates

// StoreStoresGo is the domain/store/stores.go file.
const StoreStoresGo = `package store

import (
	"strings"
	
	"github.com/pkg/errors"{{ if gt (len .Stores) 0 }}
	"{{.ApplicationGitPath}}{{.ImportDomainStoreStorer}}"{{ end }}
)

/*
	DO NOT EDIT THIS FILE.

	USE THE TOOL kickstore TO ADD OR REMOVE STORES.

	kickstore WILL EDIT THIS FILE FOR YOU.
*/

/*
	Package main's func buildStores() will build a pointer to a type Stores.
	It will eventually end up being passed to your lpc message handlers
	  so that they can use the stores.
*/

// Stores is each of the application's storers.
// Each storer is defined here as an interface.{{ if eq (len .Stores) 0 }}
// However, you haven't added any stores yet.{{ end }}
type Stores struct {
{{ range .Stores }}	{{.}} storer.{{.}}Storer
{{ end }}}

// Close closes every store.
// It returns all of the errors as one single error.
func (stores *Stores) Close() (err error) {

	errList := make([]string, 0, {{len .Stores}})
	defer func() {
		if len(errList) > 0 {
			msg := strings.Join(errList, "\n")
			err = errors.New(msg)
		}
	}()
{{ if gt (len .Stores) 0 }}
{{ range .Stores }}	if err = stores.{{.}}.Close(); err != nil {
		errList = append(errList, err.Error())
	}{{ end }}{{ end }}
	return
}
`
