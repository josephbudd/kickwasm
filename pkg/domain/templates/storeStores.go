package templates

// StoreStoresGo is the domain/store/stores.go file.
const StoreStoresGo = `{{ $Dot := . }}{{ $firstBoltStore := "" }}{{ if gt (len .BoltStores) 0 }}{{ $firstBoltStore = index .BoltStores 0 }}{{ end }}package store

import (
	"strings"
{{ if or (gt (len .BoltStores) 0) (gt (len .RemoteDBs) 0) }}
	"{{.ApplicationGitPath}}{{.ImportDomainStoreStoring}}"{{ end }}
	"github.com/pkg/errors"
)

/*
	DO NOT EDIT THIS FILE.

	USE THE TOOL kickstore TO ADD OR REMOVE STORES.

	kickstore WILL EDIT THIS FILE FOR YOU.
*/

/*
	Package main's func buildStores() will build a pointer to a type Stores.
	It will eventually end up being passed to your lpc message handlers
	  so that they can use the stores.
*/

// Stores is each of the application's storers.{{ if and (eq (len .BoltStores) 0) (eq (len .RemoteDBs) 0) }}
// You haven't added any stores yet.
// Use kickstore to add or remote local bolt stores and remote databases.{{ end }}
type Stores struct {
{{ if gt (len .BoltStores) 0 }}	// Local bolt stores.
{{ range (call .SameWidth .BoltStores) }}	{{.}} *storing.{{ (call $Dot.TrimSpace .) }}LocalBoltStore
{{ end }}{{ end }} {{- if gt (len .RemoteDBs) 0 }}	// Remote databases.
{{ range (call .SameWidth .RemoteDBs) }}	{{.}} *storing.{{ (call $Dot.TrimSpace .) }}RemoteDB
{{ end }}{{ end }}}

// Open opens every store.
// It returns all of the errors as one single error.
func (stores *Stores) Open() (err error) {

	errList := make([]string, 0, {{len .BoltStores}})
	defer func() {
		if len(errList) > 0 {
			msg := strings.Join(errList, "\n")
			err = errors.New(msg)
		}
	}()
{{ if gt (len .BoltStores) 0 }}
	// Local bolt stores.
	if err = stores.{{$firstBoltStore}}.Open(); err != nil {
		errList = append(errList, err.Error())
	} else { {{- range $i, $bs := .BoltStores }}{{ if ne $i 0}}
		stores.{{$bs}}.DB = stores.{{$firstBoltStore}}.DB{{ end }}{{ end }}
	}{{ end }}{{ if gt (len .RemoteDBs) 0 }}
	// Remote databases.{{ range .RemoteDBs }}
	if err = stores.{{.}}.Open(); err != nil {
		errList = append(errList, err.Error())
	}{{ end }}{{ end }}

	return
}

// Close closes every store.
// It returns all of the errors as one single error.
func (stores *Stores) Close() (err error) {

	errList := make([]string, 0, {{len .BoltStores}})
	defer func() {
		if len(errList) > 0 {
			msg := strings.Join(errList, "\n")
			err = errors.New(msg)
		}
	}()
{{ if gt (len .BoltStores) 0 }}
	if err = stores.{{$firstBoltStore}}.Close(); err != nil {
		errList = append(errList, err.Error())
	}{{ end }}{{ if gt (len .RemoteDBs) 0 }}{{ range .RemoteDBs }}
	if err = stores.{{.}}.Close(); err != nil {
		errList = append(errList, err.Error())
	}{{ end }}{{ end }}

	return
}
`
