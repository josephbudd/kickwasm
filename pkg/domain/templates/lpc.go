package templates

// LPCPayloadGo is domain/lpc/payload.go
const LPCPayloadGo = `package lpc

// Do not edit this file.

// Payload is the lpc payload which contains
//  the id and cargo. The cargo will be the message struct.
type Payload struct {
	ID    uint64
	Cargo []byte
}
`

// LPCLogGo is domain/lpc/message/log.go
const LPCLogGo = `package message

// LogRendererToMainProcess is the Log message that the renderer sends to the main process.
type LogRendererToMainProcess struct {
	Level   uint64
	Message string
}

// LogMainProcessToRenderer is the Log message that the main process sends to the renderer.
type LogMainProcessToRenderer struct {
	Error        bool
	ErrorMessage string
	Level        uint64
	Message      string
}
`

// MessageGo is a new lpcs editable message structs file.
// Example: UpdateCustomer.go
const MessageGo = `package message

// {{.LPCName}}RendererToMainProcess is the {{.LPCName}} message that the renderer sends to the main process.
type {{.LPCName}}RendererToMainProcess struct {
}

// {{.LPCName}}MainProcessToRenderer is the {{.LPCName}} message that the main process sends to the renderer.
type {{.LPCName}}MainProcessToRenderer struct {
	Error        bool
	ErrorMessage string
}
`

// LPCInstructions is the domain/lpc/message/instructions.txt.
const LPCInstructions = `
ABOUT THE FILES IN THE FOLDER domain/lpc/message/.

* Log.go was generated by kickwasm when this framework was created.
  The file contains the types of the 2 Log messages.
	1. LogRendererToMainProcess is the message that the renderer sends to the main process.
	2. LogMainProcessToRenderer is the message that the main process sends to the renderer.{{ range .LPCNames }}

* {{.}}.go was generated by kicklpc.
  The file contains the types of the 2 {{.}} messages.
	1. {{.}}RendererToMainProcess is the message that the renderer sends to the main process.
	2. {{.}}MainProcessToRenderer is the message that the main process sends to the renderer.
  kicklpc created the 2 {{.}} message types with little or no structure so that their structure could to be completed.
  There fore, you may edit {{.}}.go.{{ end }}

ABOUT THE FILES IN THE FOLDER mainprocess/lpc/dispatch/.

  * dispatch.go contains func Do which dispatches the LPC ( Local Process Communications ) messages received from the renderer to the main process.
    Do not edit the file dispatch.go.
    In func Do, the messages are dispatched to the LPC message handlers here in this folder.

  Message handler files:

  * Log.go was generated by kickwasm when this framework was created.
    The file contains func handleLog(rxMessage *message.LogRendererToMainProcess, sending lpc.Sending)
      which processes the log message received from the renderer.
	You may edit the file if you need to.{{ range .LPCNames }}

  * {{.}}.go was generated by kicklpc when you added the {{.}} LPC message.
    The file contains func handle{{.}}(rxmessage *message.{{.}}RendererToMainProcess, sending lpc.Sending, eojing lpc.EOJer)
	  which must process the {{.}} message received from the renderer.
	kicklpc created func handle{{.}} void of any functionality so that it's functionality could to be coded.
	There fore, you may edit {{.}}.go.{{ end }}

MANAGING LPC MESSAGES WITH kicklpc.

* Use kicklpc in this application's root folder:
  $ cd {{.ApplicationGitPath}}/

* Listing all of the messages:
  $ kicklpc -l
  1. kicklpc would
    * Display the names of each LPC message.

* Adding a message:
  $ kicklpc -add UpdateCustomer
  1. kicklpc would
    * Add the file domain/lpc/UpdateCustomer.go
    * Add the file mainprocess/lpc/dispatch/UpdateCustomer.go
    * Update the file mainprocess/lpc/dispatch/dispatch.go
  2. You would need to
	* Complete the message definitions in domain/lpc/UpdateCustomer.go
	* Complete the func handleUpdateCustomer in mainprocess/lpc/dispatch/UpdateCustomer.go

* Deleting a message:
  $ kicklpc -delete-forever UpdateCustomer
  1. kicklpc would
    * Delete the file domain/lpc/UpdateCustomer.go
    * Delete the file mainprocess/lpc/dispatch/UpdateCustomer.go
    * Update the file mainprocess/lpc/dispatch/dispatch.go
`
