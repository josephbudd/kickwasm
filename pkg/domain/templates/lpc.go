package templates

// LPCPayloadGo is domain/lpc/payload.go
const LPCPayloadGo = `package lpc

// Do not edit this file.

// Payload is the lpc payload which contains
//  the id and cargo. The cargo will be the message struct.
type Payload struct {
	ID    uint64
	Cargo []byte
}
`

// LPCInitGo is domain/lpc/message/init.go
const LPCInitGo = `package message

// InitRendererToMainProcess is the Init message that the renderer sends to the main process.
// InitRendererToMainProcess signals that
// * the renderer process is up and running,
// * the main process may push messages to the renderer process.
type InitRendererToMainProcess struct {
}

// InitMainProcessToRenderer is the Init message that the main process sends to the renderer.
type InitMainProcessToRenderer struct {
	Error        bool
	ErrorMessage string
	Fatal        bool
}
`

// LPCLogGo is domain/lpc/message/log.go
const LPCLogGo = `package message

// LogRendererToMainProcess is the Log message that the renderer sends to the main process.
type LogRendererToMainProcess struct {
	Level   uint64
	Message string
}

// LogMainProcessToRenderer is the Log message that the main process sends to the renderer.
// Error indicates that an error occurred.
// ErrorMessage is the error message to show the user in the renderer process.
// Fatal indicates that the error is fatal and the renderer process must end.
// If Fatal is true then this message is automatically handled by the renderer process. You can ignore it.
type LogMainProcessToRenderer struct {
	Level        uint64
	Message      string

	Error        bool
	ErrorMessage string
	Fatal        bool
}
`

// MessageGo is a new lpcs editable message structs file.
// Example: UpdateCustomer.go
const MessageGo = `package message

// {{.LPCName}}RendererToMainProcess is the {{.LPCName}} message that the renderer sends to the main process.
type {{.LPCName}}RendererToMainProcess struct {
}

// {{.LPCName}}MainProcessToRenderer is the {{.LPCName}} message that the main process sends to the renderer.
// Error indicates that an error occurred.
// ErrorMessage is the error message to show the user in the renderer process.
// Fatal indicates that the error is fatal and the renderer process must end.
// If Fatal is true then this message is automatically handled by the renderer process. You can ignore it.
type {{.LPCName}}MainProcessToRenderer struct {
	Error        bool
	ErrorMessage string
	Fatal        bool
}
`

// LPCInstructions is the domain/lpc/message/instructions.txt.
const LPCInstructions = `
ABOUT THE FILES IN THE FOLDER domain/lpc/message/.

* Init.go was generated by kickwasm when this framework was created.
  The file contains the types of the 2 Init messages.
  1. InitRendererToMainProcess is the message that the renderer sends to the main process.
     The message signals that
     * the renderer process is up and running,
     * the main process may push messages to the renderer process.
     The message is sent from rendererprocess/Main.go which you can edit.
  2. LogMainProcessToRenderer is the message that the main process sends to the renderer.
     * You may or may not have a use for LogMainProcessToRenderer.

* Log.go was generated by kickwasm when this framework was created.
  The file contains the types of the 2 Log messages.
  1. LogRendererToMainProcess is the message that the renderer sends to the main process.
     * It will log the message to the application's logger.
  2. LogMainProcessToRenderer is the message that the main process sends to the renderer.
     * You may or may not have a use for LogMainProcessToRenderer.{{ range .LPCNames }}

* {{.}}.go was generated by kicklpc.
  The file contains the types of the 2 {{.}} messages.
  1. {{.}}RendererToMainProcess is the message that the renderer sends to the main process.
  2. {{.}}MainProcessToRenderer is the message that the main process sends to the renderer.
  kicklpc created the 2 {{.}} message types with little or no structure so that their structure could to be completed.
  There fore, you may edit {{.}}.go.{{ end }}

ABOUT THE FILES IN THE FOLDER mainprocess/lpc/dispatch/.

  * mainprocess/lpc/dispatch/dispatch.go contains func Do which dispatches the LPC ( Local Process Communications ) messages received from the renderer to the main process.
    Do not edit the file dispatch.go.
    In func Do, the messages are dispatched to the LPC message handlers also in mainprocess/lpc/dispatch/.

  Message handler files:

  * mainprocess/lpc/dispatch/Init.go was generated by kickwasm when this framework was created.
    The file contains func handleInit(rxMessage *message.InitRendererToMainProcess, sending lpc.Sending, eojing lpc.EOJer, stores *store.Stores).
    kickwasm created func handleInit void of any functionality so that it's functionality could to be coded.
    You could for example, start a main process home which pushes messages to the renderer process.
    You may edit the file if you need to give func handleInit functionality.

  * mainprocess/lpc/dispatch/Log.go was generated by kickwasm when this framework was created.
    The file contains func handleLog(rxMessage *message.LogRendererToMainProcess, sending lpc.Sending)
      which processes the log message received from the renderer.
    You may edit the file if you need to.{{ range .LPCNames }}

  * mainprocess/lpc/dispatch/{{.}}.go was generated by kicklpc when you added the {{.}} LPC message.
    The file contains func handle{{.}}(rxmessage *message.{{.}}RendererToMainProcess, sending lpc.Sending, eojing lpc.EOJer, stores *store.Stores)
      which must process the {{.}} message received from the renderer.
    kicklpc created func handle{{.}} void of any functionality so that it's functionality could to be coded.
    There fore, you may edit {{.}}.go.{{ end }}

MANAGING LPC MESSAGES WITH kicklpc.

* Use kicklpc in this application's root folder:
  $ cd {{.ApplicationGitPath}}/

* Listing all of the messages:
  $ kicklpc -l
  1. kicklpc would
    * Display the names of each LPC message.

* Adding a message:
  $ kicklpc -add UpdateCustomer
  1. kicklpc would
    * Add the file domain/lpc/UpdateCustomer.go
    * Add the file mainprocess/lpc/dispatch/UpdateCustomer.go
    * Update the file mainprocess/lpc/dispatch/dispatch.go
  2. You would need to
  * Complete the message definitions in domain/lpc/UpdateCustomer.go
  * Complete the func handleUpdateCustomer in mainprocess/lpc/dispatch/UpdateCustomer.go

* Deleting a message:
  $ kicklpc -delete-forever UpdateCustomer
  1. kicklpc would
    * Delete the file domain/lpc/UpdateCustomer.go
    * Delete the file mainprocess/lpc/dispatch/UpdateCustomer.go
    * Update the file mainprocess/lpc/dispatch/dispatch.go
`
